{"version":3,"sources":["components/GameBoard.js","gameFormat.js","components/ConnectFour.js","App.js","index.js"],"names":["style","display","gridTemplate","Slot","value","onClick","disabled","className","GameBoard","slots","map","slot","i","checkFormat","a","b","c","d","connectFour","buttonRestart","marginTop","padding","gameContainer","flexDirection","alignItems","gameHeader","width","fontFamily","gameTitle","Game","useState","Array","fill","gameBoard","setBoard","player","setplayer","counter","length","numSlots","winCondition","checkWin","boardState","mainGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGMA,EAAQ,CACZC,QAAS,OACTC,aAAc,iCAYVC,EAAO,SAAC,GACb,IADeC,EAChB,EADgBA,MAAOC,EACvB,EADuBA,QAASC,EAChC,EADgCA,SAE9B,OACE,wBACEA,SAAUA,EACVD,QAASA,EACTE,UAAW,eAAiBH,KAMnBI,EAtBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,QAAV,OAChB,qBAAKL,MAAOA,EAAZ,SACGS,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAAMN,SAAUK,EAAcP,MAAOO,EAAMN,QAAS,kBAAMA,EAAQO,KAAvCA,SCVnC,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,GAE5B,OAAOH,IAAMC,GAAKD,IAAME,GAAKF,IAAMG,ECErC,IAAMC,EACN,CACEC,cACA,CACEC,UAAW,GACXC,QAAS,IAEXC,cACA,CACErB,QAAS,OACTsB,cAAe,SACfC,WAAY,UAEdC,WACA,CACExB,QAAS,OACTsB,cAAe,SACfC,WAAY,SACZE,MAAO,OACPC,WAAY,cAEdC,UACA,CACED,WAAY,eAkEDE,EA7DF,WAEX,MAA8BC,mBAASC,MAAM,IAAIC,KAAK,OAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACMC,ED9BD,SAAkB5B,GAIvB,IAFA,IAESG,EAAI,EAAGA,EAAIH,EAAM6B,OAASC,GAAc3B,IAE/C,GAEe,OAAbH,EAAMG,IACNC,EAEEJ,EAAMG,GACNH,EAAMG,EATG,GAUTH,EAAMG,EAAI2B,IACV9B,EAAMG,EAAI2B,KAIZ,OAAO9B,EAAMG,GAGjB,IAAK,IAAIA,EAAI,EAAGA,EAAIH,EAAM6B,OAAQ1B,IAEhC,GArBiB,IAuBfA,GACM4B,KAAN5B,GACM4B,KAAN5B,GACM4B,KAAN5B,GACM4B,KAAN5B,GACM4B,KAAN5B,EAGAA,GAAK,OAKL,GAAIH,EAAMG,KAAOH,EAAMG,EAAI,IAIV,OAAbH,EAAMG,IACNC,EAAYJ,EAAMG,GAAIH,EAAMG,EAAI,GAAIH,EAAMG,EAAI,GAAIH,EAAMG,EAAI,IAG5D,OAAOH,EAAMG,GAOrB,IAAK,IAAIA,EAAI,EAAGA,EAAIH,EAAM6B,QAEnB7B,EAAMG,GAFqBA,IAMhC,GAAIA,IAAMH,EAAM6B,OAAS,EAEvB,OAAQ,EAGZ,OAAO,KClCSG,CAASR,GA+BzB,OACE,sBAAKjC,MAAOkB,EAAYI,cAAxB,UACE,oBAAItB,MAAOkB,EAAYU,UAAvB,2BACA,qBAAK5B,MAAOkB,EAAYO,WAAxB,SACE,6BACGY,IAAwB,IAAbA,EACR,kBAAoBA,EAAU,SAC9BA,EACA,cACA,UAAYF,MAGpB,qBAAKnC,MAAOkB,EAAYe,UAAxB,SACE,cAAC,EAAD,CAAWxB,MAAOwB,EAAW5B,QAnCT,SAACO,GAEzB,IAAM8B,EAAU,YAAOT,GACnBI,IAKJK,EAAW9B,GAAKuB,EAChBD,EAASQ,GAGPN,EAFa,IAAXD,EAEQ,EAIA,SAqBV,8BACGE,EACC,wBAAQrC,MAAOkB,EAAYC,cAAed,QA/ClD,WAEE6B,EAASH,MAAM,IAAIC,KAAK,OACxBI,EAAU,IA4CJ,mBAGE,WCrFG,SAASO,IAEtB,OAAO,cAAC,EAAD,ICATC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dad4e132.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/playerSlots.css\";\n\nconst style = {\n  display: \"grid\",\n  gridTemplate: \"repeat(6,1fr) / repeat(7,1fr)\",\n};\nconst GameBoard = ({ slots, onClick }) => (\n  <div style={style}>\n    {slots.map((slot, i) => {\n      return (\n        <Slot disabled={slot} key={i} value={slot} onClick={() => onClick(i)} />\n      );\n    })}\n  </div>\n);\n\nconst Slot = ({ value, onClick, disabled }) => \n{\n  return (\n    <button\n      disabled={disabled}\n      onClick={onClick}\n      className={\"slot  player\" + value}\n    ></button>\n  );\n};\n\n\nexport default GameBoard;\n","//This function helps check the format\nfunction checkFormat(a, b, c, d) \n{\n  return a === b && a === c && a === d;\n}\n\n//This function helps set the dimensions of the board, as well as vertically/horizontally checks the slots on the board\nexport function checkWin(slots) \n{\n  let winCondition = 4;\n  let numSlots = 7;\n  for (let i = 0; i < slots.length - numSlots * 3; i++) \n  {\n    if \n    (\n      slots[i] !== null &&\n      checkFormat\n      (\n        slots[i],\n        slots[i + numSlots],\n        slots[i + numSlots * 2],\n        slots[i + numSlots * 3]\n      )\n    ) \n    {\n      return slots[i];\n    }\n  }\n  for (let i = 0; i < slots.length; i++) \n  {\n    if \n    (\n      i === winCondition ||\n      i === winCondition + numSlots ||\n      i === winCondition + numSlots * 2 ||\n      i === winCondition + numSlots * 3 ||\n      i === winCondition + numSlots * 4 ||\n      i === winCondition + numSlots * 5\n    ) \n    {\n      i += 2;\n    } \n    else \n    {\n      //This checks if the slot at the index is the same\n      if (slots[i] === slots[i + 1]) \n      {\n        if \n        (\n          slots[i] !== null &&\n          checkFormat(slots[i], slots[i + 1], slots[i + 2], slots[i + 3])\n        ) \n        {\n          return slots[i];\n        }\n      }\n    }\n  }\n\n  //This checks if all the slots are occupied\n  for (let i = 0; i < slots.length; i++) \n  {\n    if (!slots[i]) \n    {\n      break;\n    }\n    if (i === slots.length - 1) \n    {\n      return -1;\n    }\n  }\n  return null;\n}\n","import React, { useState } from \"react\";\nimport GameBoard from \"./GameBoard\";\nimport { checkWin } from \"../gameFormat\";\n\n//This helps selects the button styles\nconst connectFour = \n{\n  buttonRestart: \n  {\n    marginTop: 20,\n    padding: 10,\n  },\n  gameContainer: \n  {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  gameHeader: \n  {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    width: \"100%\",\n    fontFamily: \"sans-serif\",\n  },\n  gameTitle: \n  {\n    fontFamily: \"sans-serif\",\n  },\n};\n\n//Everytime a button has been pressed, the counter will change based off the button state\nconst Game = () => \n{\n  const [gameBoard, setBoard] = useState(Array(42).fill(null));\n  const [player, setplayer] = useState(1);\n  const counter = checkWin(gameBoard);\n  function resetBoard() \n  {\n    setBoard(Array(42).fill(null));\n    setplayer(1);\n  }\n\n  //Manages buttons so that if you click one, it gets disabled and when you win, all the buttons are disabled\n  //This also alternates between players\n  const manageButtonClick = (i) => \n  {\n    const boardState = [...gameBoard];\n    if (counter) \n    {\n      return;\n    }\n\n    boardState[i] = player;\n    setBoard(boardState);\n    if (player === 1) \n    {\n      setplayer(2);\n    } \n    else \n    {\n      setplayer(1);\n    }\n  };\n\n  //This returns the states of the buttons and players and returns the results\n  //This also makes it so that buttons that are clicked are disabled right after to prevent you from clicking the same button twice\n  return (\n    <div style={connectFour.gameContainer}>\n      <h1 style={connectFour.gameTitle}>cchen842_lab2</h1>\n      <div style={connectFour.gameHeader}>\n        <h1>\n          {counter && counter !== -1\n            ? \"Result: Player \" + counter + \" wins!\"\n            : counter\n            ? \"Result: Tie\"\n            : \"Player \" + player}\n        </h1>\n      </div>\n      <div style={connectFour.gameBoard}>\n        <GameBoard slots={gameBoard} onClick={manageButtonClick} />\n      </div>\n      <div>\n        {counter ? (\n          <button style={connectFour.buttonRestart} onClick={resetBoard}>\n            Reset\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/ConnectFour\";\n\nexport default function mainGame() \n{\n  return <Game></Game>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ConnectFour from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectFour />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}